using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEditor.Animations;
using UnityEngine;

namespace Animation
{
    public static class AnimatorUtils
    {
        [MenuItem("Tools/Generate hashes")]
        public static void GenerateAnimatorCode()
        {
            Animator animator = Selection.activeGameObject?.GetComponent<Animator>();
            if (animator == null)
            {
                Debug.LogWarning("Select a GameObject with an Animator component.");
                return;
            }

            AnimatorController controller = animator.runtimeAnimatorController as AnimatorController;
            if (controller == null)
            {
                Debug.LogWarning("Animator does not have a valid AnimatorController.");
                return;
            }
            StringBuilder sb = new StringBuilder();

            string fileName = $"{controller.name}Hashes";

            string folderPath = "Assets";
            if (Selection.activeObject != null)
            {
                string selectedPath = AssetDatabase.GetAssetPath(Selection.activeObject);
                if (Directory.Exists(selectedPath))
                    folderPath = selectedPath;
            }


            sb.AppendLine("// This file is generated by AnimatorUtils.");
            sb.AppendLine();
            sb.AppendLine($"public struct {fileName}");
            sb.AppendLine("{");

            sb.AppendLine("// States");
            foreach (var pair in GenerateFullPathHashes(controller))
            {
                string stateNameSafe = pair.Key.Replace(" ", "_");
                sb.AppendLine($"    public const int {stateNameSafe}AnimatorState = {pair.Value};");
            }
            sb.AppendLine();

            // --- Parameters ---
            sb.AppendLine("// Parameters");
            foreach (var param in controller.parameters)
            {
                string paramNameSafe = param.name.Replace(" ", "_");
                sb.AppendLine($"    public const int {paramNameSafe}{param.type} = {param.nameHash};");
            }

            sb.AppendLine("}");

            // Save to Assets
            string path = $"{folderPath}/{fileName}.cs";
            File.WriteAllText(path, sb.ToString());
            AssetDatabase.Refresh();

            Debug.Log($"{fileName}.cs generated successfully!");
        }
        // Generate fullPath hashes for all states in the AnimatorController
        public static Dictionary<string, int> GenerateFullPathHashes(AnimatorController controller)
        {
            Dictionary<string, int> hashDict = new Dictionary<string, int>();

            foreach (var layer in controller.layers)
            {
                string layerPrefix = layer.name; // start with layer name
                ProcessStateMachine(layer.stateMachine, layerPrefix, hashDict);
            }

            return hashDict;
        }
        private static void ProcessStateMachine(AnimatorStateMachine stateMachine, string pathPrefix, Dictionary<string, int> hashDict)
        {
            // Process all states in this attackState machine
            foreach (var state in stateMachine.states)
            {
                string fullPath = pathPrefix + "." + state.state.name;
                int hash = Animator.StringToHash(fullPath);
                hashDict[fullPath.Replace(".", "_")] = hash;
            }

            // Recursively process sub-attackState machines
            foreach (var subSM in stateMachine.stateMachines)
            {
                string subPathPrefix = pathPrefix + "." + subSM.stateMachine.name;
                ProcessStateMachine(subSM.stateMachine, subPathPrefix, hashDict);
            }
        }
    }
}